options
{
  static = true;
}

PARSER_BEGIN(PropositionalLogicParser)
package Parsers.PropLogic;

import java.io.StringReader;

public class PropositionalLogicParser
{
  public static PropositionalLogicParser parser;
  public static String parse(StringReader stringReader) throws ParseException
  {
    if(parser==null)
    {
      parser=new PropositionalLogicParser(stringReader);
    }
    else
    {
      ReInit(stringReader);
    }
      try
      {
        if (PropositionalLogicParser.one_line()==0)
        {
          return "OK";
        }
      }
      catch (Exception e)
      {
        return "NOK."+"\n"+e.getMessage();
      }
      catch (Error e)
      {
        return "Ooops."+"\n"+e.getMessage();
      }
  		return "Nope";
    }
  }

PARSER_END(PropositionalLogicParser)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN : /* OPERATORS */
{
  < NEGATION:"!" >
| < CONJUNCTION : "/\\" >
| < DISJUNCTION : "\\/" >
| < IMPLICATION : "->" >
| < REVERSE_IMPLICATION : "<-" >
| < DOUBLE_IMPLICATION:"<->" >
}

TOKEN :
{
  < LETTER : ["a"-"z","A"-"Z"] >
}

int one_line() :
{}
{
  (binary()) 
  {
    return 0;
  }

}

void binary() :
{}
{
  unary()
  (
    (
  	 < CONJUNCTION >
    | < DISJUNCTION >
    | < IMPLICATION >
    | < REVERSE_IMPLICATION >
    | < DOUBLE_IMPLICATION >
    )
    unary()
  )*
}

void unary() :
{}
{
(    (< NEGATION >)+ formula() | formula())
}

void formula() :
{}
{
 (   < LETTER >| "(" binary() ")")
}
